#include <iostream>
#include <vector>
#include <random>
#include <chrono>

#define N 2
#define _epsilon 0.01

using namespace std;
class _vector
{
public:
    vector<double> v;
    _vector(){};
    _vector operator*(const _vector&) const;
    //_vector operator=(const _vector&) const;
};

_vector _vector::operator*(const _vector& xpto) const
{
      return *this;
}

/*_vector _vector::operator=(const _vector& xpto) const
{
    (this->v) = (xpto.v);
    return *this;
}*/



double f(vector<double> &x)
{
    double r=0.0;
    for(int i=0;i<x.size();i++)
        r += (x[i] * x[i]);
    return r;
}

vector<double> grad(vector<double> &x)
{
    vector<double> r(N);
    vector<double> x_plus_e(N);

    for(int i=0;i<x.size();i++)
    {
        x_plus_e = x;
        x_plus_e[i] += _epsilon;
        r.push_back( ( f(x_plus_e) - f(x) ) / _epsilon );
    }

    return r;
}

int main()
{
    std::default_random_engine generator(std::chrono::system_clock::now().time_since_epoch().count());
    std::uniform_real_distribution<double> distribution(-100.0, +100.0);

    vector<double> x(N);
    for(int i=0;i<x.size();i++)
        x.push_back(distribution(generator));

    vector<double> grad_x0(N);
    vector<double> grad_x1(N);
    for(int i=0;i<x.size();i++)
    {
        grad_x0.push_back(0.0);
        grad_x1.push_back(0.0);
    }


    double f0 = f(x);
    grad_x0 = grad(x);

    vector<double> p(N);
    for(int i=0;i<x.size();i++)
        p.push_back( -1 * grad_x[i] );

    int k = 0;

    while ( isGradZero(grad_x) == false  )
    {
        double alpha = 0.1;

        for(int i=0;i<x.size();i++)
            x[i] = x[i] + alpha * p[i];

        grad_x1 = grad(x);

        double a =0, b=0;
        for(int i=0;i<x.size();i++)
        {
            a += (grad_x1[i] * grad_x1[i]);
            b += (grad_x0[i] * grad_x0[i]);
        }
        beta = a/b;

        for(int i=0;i<x.size();i++)
            x[i] = -1 * grad_x1[i]  + beta * p[i];


        grad_x0 = grad_x1;
    }

    cout << "Hello world!" << endl;
    return 0;
}
